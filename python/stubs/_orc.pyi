# BSD 2-Clause License
#
# Copyright (c) 2024, ZhengYu, Xu
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from typing import IO, Literal

from .lib import (
    Buffer,
    KeyValueMetadata,
    MemoryPool,
    NativeFile,
    RecordBatch,
    Schema,
    Table,
    _Weakrefable,
)

class ORCReader(_Weakrefable):
    def __init__(self, memory_pool: MemoryPool | None = None) -> None: ...
    def open(self, source: str | NativeFile | Buffer, use_memory_map: bool = True): ...
    def metadata(self) -> KeyValueMetadata: ...
    def schema(self) -> Schema: ...
    def nrows(self) -> int: ...
    def nstripes(self) -> int: ...
    def file_version(self) -> str: ...
    def software_version(self) -> str: ...
    def compression(self) -> Literal["UNCOMPRESSED", "ZLIB", "SNAPPY", "LZ4", "ZSTD"]: ...
    def compression_size(self) -> int: ...
    def row_index_stride(self) -> int: ...
    def writer(self) -> str: ...
    def writer_version(self) -> str: ...
    def nstripe_statistics(self) -> int: ...
    def content_length(self) -> int: ...
    def stripe_statistics_length(self) -> int: ...
    def file_footer_length(self) -> int: ...
    def file_postscript_length(self) -> int: ...
    def file_length(self) -> int: ...
    def serialized_file_tail(self) -> int: ...
    def read_stripe(self, n: int, columns: list[str] | None = None) -> RecordBatch: ...
    def read(self, columns: list[str] | None = None) -> Table: ...

class ORCWriter(_Weakrefable):
    def open(
        self,
        where: str | NativeFile | IO,
        *,
        file_version: str | None = None,
        batch_size: int | None = None,
        stripe_size: int | None = None,
        compression: Literal["UNCOMPRESSED", "ZLIB", "SNAPPY", "LZ4", "ZSTD"] | None = None,
        compression_block_size: int | None = None,
        compression_strategy: Literal["COMPRESSION", "SPEED"] | None = None,
        row_index_stride: int | None = None,
        padding_tolerance: float | None = None,
        dictionary_key_size_threshold: float | None = None,
        bloom_filter_columns: list[int] | None = None,
        bloom_filter_fpp: float | None = None,
    ) -> None: ...
    def write(self, table: Table) -> None: ...
    def close(self) -> None: ...
