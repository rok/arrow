# BSD 2-Clause License
#
# Copyright (c) 2024, ZhengYu, Xu
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from types import ModuleType
from typing import Any, Iterable, TypeGuard

import pandas as pd

from numpy import dtype
from pandas.core.dtypes.base import ExtensionDtype

class _PandasAPIShim:
    has_sparse: bool

    def series(self, *args, **kwargs) -> pd.Series: ...
    def data_frame(self, *args, **kwargs) -> pd.DataFrame: ...
    @property
    def have_pandas(self) -> bool: ...
    @property
    def compat(self) -> ModuleType: ...
    @property
    def pd(self) -> ModuleType: ...
    def infer_dtype(self, obj: Iterable) -> str: ...
    def pandas_dtype(self, dtype: str) -> dtype: ...
    @property
    def loose_version(self) -> Any: ...
    @property
    def version(self) -> str: ...
    def is_v1(self) -> bool: ...
    def is_ge_v21(self) -> bool: ...
    def is_ge_v23(self) -> bool: ...
    def is_ge_v3(self) -> bool: ...
    @property
    def categorical_type(self) -> type[pd.Categorical]: ...
    @property
    def datetimetz_type(self) -> type[pd.DatetimeTZDtype]: ...
    @property
    def extension_dtype(self) -> type[ExtensionDtype]: ...
    def is_array_like(
        self, obj: Any
    ) -> TypeGuard[pd.Series | pd.Index | pd.Categorical | ExtensionDtype]: ...
    def is_categorical(self, obj: Any) -> TypeGuard[pd.Categorical]: ...
    def is_datetimetz(self, obj: Any) -> TypeGuard[pd.DatetimeTZDtype]: ...
    def is_extension_array_dtype(self, obj: Any) -> TypeGuard[ExtensionDtype]: ...
    def is_sparse(self, obj: Any) -> bool: ...
    def is_data_frame(self, obj: Any) -> TypeGuard[pd.DataFrame]: ...
    def is_series(self, obj: Any) -> TypeGuard[pd.Series]: ...
    def is_index(self, obj: Any) -> TypeGuard[pd.Index]: ...
    def get_values(self, obj: Any) -> bool: ...
    def get_rangeindex_attribute(self, level, name): ...

_pandas_api: _PandasAPIShim

__all__ = ["_PandasAPIShim", "_pandas_api"]
